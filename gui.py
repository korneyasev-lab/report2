"""
GUI –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from datetime import datetime
from logic import ReportLogic
import subprocess
import os


class ReportApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GUI"""

    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤")
        self.root.geometry("1200x800")

        self.logic = ReportLogic()
        self.current_block_widgets = {}

        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        os.makedirs("—à–∞–±–ª–æ–Ω—ã", exist_ok=True)

        self.show_main_menu()

    def clear_frame(self):
        """–û—á–∏—Å—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        for widget in self.main_frame.winfo_children():
            widget.destroy()

    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.clear_frame()

        tk.Label(self.main_frame, text="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤", font=("Arial", 24, "bold")).pack(pady=50)

        btn_frame = tk.Frame(self.main_frame)
        btn_frame.pack(pady=20)

        tk.Button(btn_frame, text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç", font=("Arial", 16), width=30, height=2, command=self.show_report_creation).pack(pady=10)
        tk.Button(btn_frame, text="–û—Ç–∫—Ä—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç", font=("Arial", 16), width=30, height=2, command=self.show_saved_reports).pack(pady=10)
        tk.Button(btn_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤", font=("Arial", 16), width=30, height=2, command=self.show_all_reports_list).pack(pady=10)
        tk.Button(btn_frame, text="–í—ã—Ö–æ–¥", font=("Arial", 16), width=30, height=2, command=self.root.quit).pack(pady=10)

    def show_report_creation(self):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—á–µ—Ç–∞"""
        self.clear_frame()

        tk.Label(self.main_frame, text="–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç", font=("Arial", 20, "bold")).pack(pady=30)

        form_frame = tk.Frame(self.main_frame)
        form_frame.pack(pady=20)

        tk.Label(form_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É:", font=("Arial", 16)).grid(row=0, column=0, sticky="w", pady=10)
        self.form_var = tk.StringVar()
        forms = self.logic.load_forms_list()

        if not forms:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º –≤ –ø–∞–ø–∫–µ '—Ñ–æ—Ä–º—ã/'")
            self.show_main_menu()
            return

        ttk.Combobox(form_frame, textvariable=self.form_var, values=forms, font=("Arial", 16), width=30, state="readonly").grid(row=0, column=1, pady=10, padx=10)

        tk.Label(form_frame, text="–ú–µ—Å—è—Ü:", font=("Arial", 16)).grid(row=1, column=0, sticky="w", pady=10)
        self.month_var = tk.StringVar()
        months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
        ttk.Combobox(form_frame, textvariable=self.month_var, values=months, font=("Arial", 16), width=30, state="readonly").grid(row=1, column=1, pady=10, padx=10)

        tk.Label(form_frame, text="–ì–æ–¥:", font=("Arial", 16)).grid(row=2, column=0, sticky="w", pady=10)
        self.year_var = tk.StringVar(value=str(datetime.now().year))
        tk.Entry(form_frame, textvariable=self.year_var, font=("Arial", 16), width=32).grid(row=2, column=1, pady=10, padx=10)

        tk.Label(form_frame, text="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", font=("Arial", 16)).grid(row=3, column=0, sticky="w", pady=10)
        self.date_var = tk.StringVar(value=datetime.now().strftime("%d.%m.%Y"))
        tk.Entry(form_frame, textvariable=self.date_var, font=("Arial", 16), width=32).grid(row=3, column=1, pady=10, padx=10)

        btn_frame = tk.Frame(self.main_frame)
        btn_frame.pack(pady=30)
        tk.Button(btn_frame, text="–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", font=("Arial", 16), width=20, command=self.start_filling).pack(side=tk.LEFT, padx=10)
        tk.Button(btn_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 16), width=20, command=self.show_main_menu).pack(side=tk.LEFT, padx=10)

    def start_filling(self):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        form_name = self.form_var.get()
        month = self.month_var.get()
        year = self.year_var.get()
        report_date = self.date_var.get()

        if not all([form_name, month, year, report_date]):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return

        excel_file = f"—Ñ–æ—Ä–º—ã/{form_name}.xlsx"
        if not self.logic.load_questions_from_excel(excel_file):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ {excel_file}")
            return

        self.logic.init_report(form_name, month, year, report_date)
        self.show_questions_screen()

    def show_questions_screen(self):
        """–≠–∫—Ä–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±–ª–æ–∫–∞–º–∏"""
        self.clear_frame()

        start, end = self.logic.get_current_block_questions()
        total = len(self.logic.questions_list)

        header = f"–û—Ç—á–µ—Ç: {self.logic.current_report_data['form_name']} {self.logic.current_report_data['month']} {self.logic.current_report_data['year']}"
        tk.Label(self.main_frame, text=header, font=("Arial", 16, "bold")).pack(pady=5)
        tk.Label(self.main_frame, text=f"–í–æ–ø—Ä–æ—Å—ã {start + 1}-{end} –∏–∑ {total}", font=("Arial", 14)).pack(pady=2)

        canvas_frame = tk.Frame(self.main_frame)
        canvas_frame.pack(pady=5, fill=tk.BOTH, expand=True)

        canvas = tk.Canvas(canvas_frame)
        scrollbar = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        self.current_block_widgets = {}
        for i in range(start, end):
            self.create_question_widget(scrollable_frame, i)

        btn_frame = tk.Frame(self.main_frame)
        btn_frame.pack(pady=10)

        btn_prev = tk.Button(btn_frame, text="‚Üê –ù–∞–∑–∞–¥", font=("Arial", 18), width=15, command=self.on_prev_block)
        btn_prev.pack(side=tk.LEFT, padx=5)
        if start == 0:
            btn_prev.config(state=tk.DISABLED)

        btn_next = tk.Button(btn_frame, text="–î–∞–ª–µ–µ ‚Üí" if end < total else "–ó–∞–≤–µ—Ä—à–∏—Ç—å", font=("Arial", 18), width=15, command=self.on_next_block)
        btn_next.pack(side=tk.LEFT, padx=5)

        tk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", font=("Arial", 18), width=15, command=self.on_save_report).pack(side=tk.LEFT, padx=5)

    def create_question_widget(self, parent, question_index):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        question = self.logic.questions_list[question_index]
        answer_data = self.logic.answers_list[question_index]

        q_frame = tk.LabelFrame(parent, text=f"–í–æ–ø—Ä–æ—Å {question_index + 1}", font=("Arial", 16, "bold"), padx=10, pady=5)
        q_frame.pack(pady=5, padx=20, fill=tk.X)

        top_frame = tk.Frame(q_frame)
        top_frame.pack(fill=tk.X, pady=2)

        answer_frame = tk.Frame(top_frame)
        answer_frame.pack(side=tk.LEFT, padx=(0, 15))

        current_answer = answer_data['answer_yes_no']

        btn_yes = tk.Button(
            answer_frame, text="–î–ê", font=("Arial", 18, "bold"), width=5,
            bg="green" if current_answer == "–î–∞" else "lightgray",
            fg="white" if current_answer == "–î–∞" else "darkgreen",
            activebackground="darkgreen",
            activeforeground="white",
            relief=tk.SUNKEN if current_answer == "–î–∞" else tk.RAISED,
            highlightthickness=2,
            highlightbackground="green" if current_answer == "–î–∞" else "gray",
            command=lambda idx=question_index: self.set_answer(idx, "–î–∞")
        )
        btn_yes.pack(side=tk.LEFT, padx=3)

        btn_no = tk.Button(
            answer_frame, text="–ù–ï–¢", font=("Arial", 18, "bold"), width=5,
            bg="red" if current_answer == "–ù–µ—Ç" else "lightgray",
            fg="white" if current_answer == "–ù–µ—Ç" else "darkred",
            activebackground="darkred",
            activeforeground="white",
            relief=tk.SUNKEN if current_answer == "–ù–µ—Ç" else tk.RAISED,
            highlightthickness=2,
            highlightbackground="red" if current_answer == "–ù–µ—Ç" else "gray",
            command=lambda idx=question_index: self.set_answer(idx, "–ù–µ—Ç")
        )
        btn_no.pack(side=tk.LEFT, padx=3)

        tk.Label(top_frame, text=question['question'], font=("Arial", 18), wraplength=800, justify=tk.LEFT, anchor='w').pack(side=tk.LEFT, fill=tk.X, expand=True)

        buttons_frame = tk.Frame(top_frame)
        buttons_frame.pack(side=tk.RIGHT, padx=5)

        tk.Button(buttons_frame, text="?", font=("Arial", 16, "bold"), width=3,
                  command=lambda: self.show_help(question)).pack(side=tk.LEFT, padx=2)

        if question.get('documents'):
            tk.Button(buttons_frame, text="üìÑ", font=("Arial", 16, "bold"), width=3,
                      command=lambda: self.show_documents(question)).pack(side=tk.LEFT, padx=2)

        comment_frame = tk.Frame(q_frame)
        comment_frame.pack(fill=tk.X, pady=2)
        tk.Label(comment_frame, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", font=("Arial", 18)).pack(side=tk.LEFT, padx=(0, 5))

        comment_text = tk.Text(comment_frame, height=2, font=("Arial", 18), wrap=tk.WORD)
        comment_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        if answer_data['comment']:
            comment_text.insert(1.0, answer_data['comment'])

        def adjust_height(event=None):
            lines = comment_text.get("1.0", tk.END).count('\n')
            comment_text.config(height=max(2, min(6, lines + 1)))

        comment_text.bind('<KeyRelease>', adjust_height)
        adjust_height()

        self.current_block_widgets[question_index] = {'btn_yes': btn_yes, 'btn_no': btn_no, 'comment': comment_text}

    def set_answer(self, question_index, answer):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫"""
        widgets = self.current_block_widgets[question_index]

        if answer == "–î–∞":
            widgets['btn_yes'].config(bg="green", fg="white", relief=tk.SUNKEN, highlightbackground="green", highlightthickness=2)
            widgets['btn_no'].config(bg="lightgray", fg="darkred", relief=tk.RAISED, highlightbackground="gray", highlightthickness=2)
        else:
            widgets['btn_yes'].config(bg="lightgray", fg="darkgreen", relief=tk.RAISED, highlightbackground="gray", highlightthickness=2)
            widgets['btn_no'].config(bg="red", fg="white", relief=tk.SUNKEN, highlightbackground="red", highlightthickness=2)

        widgets['btn_yes'].update()
        widgets['btn_no'].update()

        comment = widgets['comment'].get(1.0, tk.END).strip()
        self.logic.save_answer(question_index, answer, comment)

    def show_help(self, question):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_window = tk.Toplevel(self.root)
        help_window.title("–°–ø—Ä–∞–≤–∫–∞")
        help_window.geometry("900x600")

        tk.Label(help_window, text="–ì–û–°–¢ –ò–°–û 9001:", font=("Arial", 18, "bold")).pack(pady=10)
        gost_text = scrolledtext.ScrolledText(help_window, height=10, width=100, font=("Arial", 16), wrap=tk.WORD)
        gost_text.pack(pady=5, padx=10)
        gost_text.insert(1.0, question['gost'] or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        gost_text.config(state=tk.DISABLED)

        tk.Label(help_window, text="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É:", font=("Arial", 18, "bold")).pack(pady=10)
        quality_text = scrolledtext.ScrolledText(help_window, height=10, width=100, font=("Arial", 16), wrap=tk.WORD)
        quality_text.pack(pady=5, padx=10)
        quality_text.insert(1.0, question['quality'] or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        quality_text.config(state=tk.DISABLED)

        tk.Button(help_window, text="–ó–∞–∫—Ä—ã—Ç—å", font=("Arial", 16), command=help_window.destroy).pack(pady=15)

    def show_documents(self, question):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤"""
        docs = question.get('documents', '')

        if not docs:
            messagebox.showinfo("–î–æ–∫—É–º–µ–Ω—Ç—ã", "–î–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return

        doc_window = tk.Toplevel(self.root)
        doc_window.title("–°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        doc_window.geometry("600x400")

        tk.Label(doc_window, text="–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", font=("Arial", 16, "bold")).pack(pady=10)

        text_widget = scrolledtext.ScrolledText(doc_window, height=15, width=70, font=("Arial", 14), wrap=tk.WORD)
        text_widget.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)
        text_widget.insert(1.0, docs)
        text_widget.config(state=tk.DISABLED)

        btn_frame = tk.Frame(doc_window)
        btn_frame.pack(pady=10)

        tk.Button(btn_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤", font=("Arial", 14),
                  command=self.open_templates_folder).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–ó–∞–∫—Ä—ã—Ç—å", font=("Arial", 14),
                  command=doc_window.destroy).pack(side=tk.LEFT, padx=5)

    def open_templates_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
        templates_path = os.path.abspath("—à–∞–±–ª–æ–Ω—ã")

        if not os.path.exists(templates_path):
            os.makedirs(templates_path)
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–∞–ø–∫–∞ '—à–∞–±–ª–æ–Ω—ã' —Å–æ–∑–¥–∞–Ω–∞.\n–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

        try:
            if os.name == 'nt':
                os.startfile(templates_path)
            elif os.name == 'posix':
                subprocess.Popen(['xdg-open', templates_path])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{e}")

    def save_current_block(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
        for idx, widgets in self.current_block_widgets.items():
            comment = widgets['comment'].get(1.0, tk.END).strip()
            current_answer = self.logic.answers_list[idx]['answer_yes_no']
            if current_answer:
                self.logic.save_answer(idx, current_answer, comment)

    def on_prev_block(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
        self.save_current_block()
        self.logic.prev_block()
        self.show_questions_screen()

    def on_next_block(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–∞–ª–µ–µ/–ó–∞–≤–µ—Ä—à–∏—Ç—å"""
        for idx in self.current_block_widgets.keys():
            if not self.logic.answers_list[idx]['answer_yes_no']:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å {idx + 1}")
                return

        self.save_current_block()

        if not self.logic.next_block():
            self.save_report()
        else:
            self.show_questions_screen()

    def on_save_report(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
        self.save_current_block()

        all_ok, question_num = self.logic.check_all_answered()
        if not all_ok:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–í–æ–ø—Ä–æ—Å {question_num} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")
            return

        if messagebox.askyesno("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel?"):
            self.save_report()

    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç"""
        success, result = self.logic.save_report()
        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n–§–∞–π–ª: {result}\n–ü–∞–ø–∫–∞: –æ—Ç—á–µ—Ç—ã/")
            self.show_main_menu()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{result}")

    def show_saved_reports(self):
        """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        self.clear_frame()
        tk.Label(self.main_frame, text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", font=("Arial", 18, "bold")).pack(pady=20)

        reports = self.logic.get_all_reports_from_db()
        if not reports:
            tk.Label(self.main_frame, text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤", font=("Arial", 12)).pack(pady=20)
        else:
            tree = self.create_reports_tree(reports, ["ID", "–§–æ—Ä–º–∞", "–ú–µ—Å—è—Ü", "–ì–æ–¥", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"])

            btn_frame = tk.Frame(self.main_frame)
            btn_frame.pack(pady=20)
            tk.Button(btn_frame, text="–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç", font=("Arial", 12), width=20, command=lambda: self.open_report(tree)).pack(side=tk.LEFT, padx=10)
            tk.Button(btn_frame, text="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel", font=("Arial", 12), width=20, command=lambda: self.export_report(tree)).pack(side=tk.LEFT, padx=10)

        tk.Button(self.main_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), width=20, command=self.show_main_menu).pack(pady=10)

    def show_all_reports_list(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º"""
        self.clear_frame()
        tk.Label(self.main_frame, text="–í—Å–µ –æ—Ç—á–µ—Ç—ã", font=("Arial", 18, "bold")).pack(pady=20)

        reports = self.logic.get_all_reports_from_db()
        if not reports:
            tk.Label(self.main_frame, text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤", font=("Arial", 12)).pack(pady=20)
        else:
            tree = self.create_reports_tree(reports, ["ID", "–§–æ—Ä–º–∞", "–ú–µ—Å—è—Ü", "–ì–æ–¥", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–§–∞–π–ª"], [50, 200, 100, 80, 150, 300])

            btn_frame = tk.Frame(self.main_frame)
            btn_frame.pack(pady=20)
            tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç", font=("Arial", 12), width=20, command=lambda: self.delete_report(tree)).pack(side=tk.LEFT, padx=10)

        tk.Button(self.main_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), width=20, command=self.show_main_menu).pack(pady=10)

    def create_reports_tree(self, reports, columns, widths=None):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á–µ—Ç–æ–≤"""
        tree_frame = tk.Frame(self.main_frame)
        tree_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(tree_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        tree = ttk.Treeview(tree_frame, columns=columns, show="headings", yscrollcommand=scrollbar.set)
        scrollbar.config(command=tree.yview)

        for i, col in enumerate(columns):
            tree.heading(col, text=col)
            tree.column(col, width=widths[i] if widths else 150)

        for report in reports:
            values = [report['id'], report['form_name'], report['month'], report['year'], report['created_at']]
            if 'file_path' in report:
                values.append(report['file_path'])
            tree.insert("", tk.END, values=values)

        tree.pack(fill=tk.BOTH, expand=True)
        return tree

    def open_report(self, tree):
        """–û—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        report_id = tree.item(selected[0])['values'][0]
        report_data = self.logic.get_report_from_db(report_id)

        if report_data:
            self.view_report(report_data)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç")

    def view_report(self, report_data):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞"""
        self.clear_frame()

        header = f"{report_data['form_name']} - {report_data['month']} {report_data['year']}"
        tk.Label(self.main_frame, text=header, font=("Arial", 16, "bold")).pack(pady=20)

        info = f"–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {report_data['report_date']}\n–°–æ–∑–¥–∞–Ω: {report_data['created_at']}"
        tk.Label(self.main_frame, text=info, font=("Arial", 11)).pack(pady=5)

        text_frame = tk.Frame(self.main_frame)
        text_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)

        text_widget = scrolledtext.ScrolledText(text_frame, font=("Arial", 11), wrap=tk.WORD)
        text_widget.pack(fill=tk.BOTH, expand=True)

        for i, answer in enumerate(report_data['answers']):
            text_widget.insert(tk.END, f"\n{i+1}. {answer['question_text']}\n", "bold")
            text_widget.insert(tk.END, f"–û—Ç–≤–µ—Ç: {answer['answer_yes_no']}\n")
            if answer['comment']:
                text_widget.insert(tk.END, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {answer['comment']}\n")
            text_widget.insert(tk.END, "\n" + "-"*80 + "\n")

        text_widget.tag_config("bold", font=("Arial", 11, "bold"))
        text_widget.config(state=tk.DISABLED)

        tk.Button(self.main_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), width=20, command=self.show_saved_reports).pack(pady=20)

    def export_report(self, tree):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        report_id = tree.item(selected[0])['values'][0]
        report_data = self.logic.get_report_from_db(report_id)

        if report_data:
            success, result = self.logic.export_report_to_word(report_data)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:\n{result}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n{result}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç")

    def delete_report(self, tree):
        """–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        item = tree.item(selected[0])
        report_id = item['values'][0]
        report_name = f"{item['values'][1]} {item['values'][2]} {item['values'][3]}"

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç:\n{report_name}?"):
            success, message = self.logic.delete_report_from_db(report_id)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", message)
                self.show_all_reports_list()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{message}")